module Creational
  module Builder

    # Role > AbstractBuilder. Not necessary in Ruby due to the duck type
  	class EmailBuilder
	  attr_accessor :email

	  def initialize
	  	@email = Email.new
	  end

	  def set_body 
	    raise NotImplementedError
	  end

	  def set_footer
	    raise NotImplementedError
	  end

	  def set_subject
	    raise NotImplementedError
	  end
	end


	# Role > ConcreteBuilder
	class TextEmailBuilder < EmailBuilder	

	  def set_body(content)
	    @email.body = '*' * 30 + "\n#{content}\n"
	  end

	  def set_footer(content)
	    @email.footer = '*' * 30 + "\n#{content}"
	  end

	  def set_subject(subject)
	    @email.subject = "To: #{subject}"
	  end
	end


	# Role > ConcreteBuilder
	class HtmlEmailBuilder < EmailBuilder

	  def set_body(content)
	    @email.body = "<div class='content'>#{content}</div>"
	  end

	  def set_footer(content)
	    @email.footer = "<footer>#{content}</footer>"
	  end

	  def set_subject(subject)
	    @email.subject = "<h3>#{subject}</h3>"
	  end
	end


	# Role > Director
	class ReportEmail
  
	  def initialize(builder)
	    @builder = builder
	  end

	  def create_email
	    @builder.set_subject('Insights Report')
	    @builder.set_body('here a bunch of metrics...')
	    @builder.set_footer('Email generated by BuilderDesignPattern')
	  end
	end


	# Role > Director
	class AlertEmail
      
      def initialize(builder)
        @builder = builder
      end

      def create_email
        @builder.set_subject('Alert: System is down!')
        @builder.set_body('A fatal error occurred. Please check the logs')
        @builder.set_footer('Email generated by BuilderDesignPattern')
      end
	end


	# Role > Product
	class Email
	  attr_accessor :subject, :body, :footer

	  def to_s
	    [subject, body, footer].join(" ")
	  end
	end


	# Role > client
	class Application
      
      def send_report_email(format)
        email = ReportEmail.new(format)
        email.create_email

        puts format.email.to_s
      end

      def send_alert_email(format)
        email = AlertEmail.new(format)
        email.create_email

        puts format.email.to_s
      end
	end
  end
end

text_format = Creational::Builder::TextEmailBuilder.new
html_format = Creational::Builder::HtmlEmailBuilder.new

app = Creational::Builder::Application.new

app.send_report_email(text_format)
app.send_report_email(html_format)

app.send_alert_email(text_format)
app.send_alert_email(html_format)